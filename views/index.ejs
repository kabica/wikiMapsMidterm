<!DOCTYPE html>
<html>

<head>
  <title>Home Page</title>
  <!-- Bootstrap -->
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"
    integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous">
  </script>

  <!-- Framework CSS -->
  <link rel="stylesheet" href="/vendor/normalize-4.1.1.css" type="text/css" />
  <link rel="stylesheet" href="/vendor/border-box.css" type="text/css" />

  <!-- Internal CSS -->
  <link rel="stylesheet" href="/styles/layout.css" type="text/css" />
  <link rel="stylesheet" href="/styles/nav.css" type="text/css" />
  <link rel="stylesheet" href="/styles/menu.css" type="text/css" />
  <link rel="stylesheet" href="/styles/header.css" type="text/css" />
  <link rel="stylesheet" href="/styles/slider.css" type="text/css" />

  <link rel="stylesheet" href="/styles/auth.css" type="text/css" />
  <link rel="stylesheet" href="/styles/marker.css" type="text/css" />
  <link rel="stylesheet" href="/styles/discover.css" type="text/css" />

  <!-- Framework JS -->
  <script type="text/javascript" src="/vendor/jquery-3.0.0.js"></script>
  <script src="https://kit.fontawesome.com/3449331f18.js" crossorigin="anonymous"></script>
  <link href="https://fonts.googleapis.com/css?family=Bungee|Bungee+Hairline&display=swap" rel="stylesheet">
  <link rel="icon" type="image/png"
    href="https://cdn2.iconfinder.com/data/icons/funtime-animals-humans/60/004_019_parrot_bird_animal_pet-512.png">

  <!-- Internal JS -->
  <script type="text/javascript" src="/scripts/app.js"></script>
  <script type="text/javascript" src="/scripts/nav.js"></script>
  <script type="text/javascript" src="/scripts/auth.js"></script>
  <script type="text/javascript" src="/scripts/slider.js"></script>


  <style>

  </style>
</head>

<body>
  <div class="alex">
    <div class="brand">MAPS API</div>
    <div class="topic">DISCOVER</div>
    <div class="topic">EXPLORE</div>
    <!-- <div class="topic">MAPS API</div> -->
    <div class="pictures">
      <img src="/styles/node.png" alt="">
      <img id='google' src="/styles/google.png" alt="">
    </div>
    <div class="login_container">
      <% if(!userID) {%>

      <form class='login_form' action='/login' method='POST' id='loginContainer'>
        <div class="form-group">
          <% if(register_error) {%>
          <labecontainerl for="exampleInputEmail1" id='register_error'>ALREADY EXISTS!</label>
            <% }else {%>
            <label for="exampleInputEmail1" id='credentials'>CREDENTIALS</label><% }%>
            <input name='email' type="email" class="form-control" id="email" aria-describedby="emailHelp"
              placeholder="Enter email">
            <small id="emailHelp" class="form-text text-muted">servers love secrets</small>
        </div>
        <div class="form-group">
          <input name='password' type="password" class="form-control" id="password" placeholder="Password">
          <small id="emailHelp" class="form-text text-muted">we promise &hearts;</small>
        </div>
        <div class="login_register">
          <button type="submit" class="btn btn-dark" id='loginUser'>Login</button>
          <button type="submit" class="btn btn-dark" id='registerUser'>New</button>
        </div>
      </form>

      <form class='login_form' action='/register' method='POST' id='registerContainer'>
        <div class="form-group">
          <label for="exampleInputEmail1" id='credentials'>CREDENTIALS</label>
          <input name='email' type="email" class="form-control" id="email" aria-describedby="emailHelp"
            placeholder="Enter email">
          <small id="emailHelp" class="form-text text-muted">servers love secrets</small>
        </div>
        <div class="form-group">
          <input name='password' type="password" class="form-control" id="password" placeholder="Password">
          <small id="emailHelp" class="form-text text-muted">we promise &hearts;</small>
        </div>
        <div class="login_register">
          <button type="submit" class="btn btn-dark" id='registerUser'>Register</button>
        </div>
      </form>
      <%  }else {%>
      <form class='login_form' action='/logout' method='POST' id='logoutContainer'>



    </div>
    <div class="logout_form">
      <button type="submit" class="btn btn-dark" id='logout'>logout</button>
    </div>
    </form>
    <%  }%>

  </div>

  </div>
  <main class="main-container">
    <header class="map-desc">
      <h1 class="map-desc-title"><%= locals.city %></h1>

      <%# if (locals.user) { %>
      <button class="btn btn-dark" id="drop" onclick="addMarker(map)">Add Mark</button>
      <button class="btn btn-dark" id="create_map" onclick="createMap(markers)">Create</button>
      <button class="btn btn-dark" id="clear" onclick="clearMarker(markers)">Clear</button>
      <%#s } %>

        <form class="menu-search-form">
          SEARCH
          <input type="text" type="submit" class="menu-search-input" name="search-input">
        </form>
    </header>
    <section id="map" class="gmaps">
      <h2>Maps!</h2>
    </section>
    <% console.log(locals) %>
    <%- include partials/_slider %>
  </main>
</body>
<script>
  // This example requires the Places library. Include the libraries=places
  // parameter when you first load the API. For example:
  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
  let map;
  let service;
  let infowindow;
  let markers = [];

  function initMap() {
    var sydney = new google.maps.LatLng(-33.867, 151.195);
    // infowindow = new google.maps.InfoWindow();
    map = new google.maps.Map(
      document.getElementById('map'), {
        center: '<%= city %>',
        zoom: 15,
        gestureHandling: 'cooperative'
      });

    var request = {
      query: '<%= city %>',
      fields: ['name', 'geometry'],
    };
    service = new google.maps.places.PlacesService(map);
    service.findPlaceFromQuery(request, function (results, status) {
      if (status === google.maps.places.PlacesServiceStatus.OK) {
        for (var i = 0; i < results.length; i++) {
          createMarker(results[i]);
        }
        map.setCenter(results[0].geometry.location);
      }
    });
  }

  function initMapSearch(city) {
    console.log(city);
    var sydney = new google.maps.LatLng(-33.867, 151.195);
    // infowindow = new google.maps.InfoWindow();
    map = new google.maps.Map(
      document.getElementById('map'), {
        center: city,
        zoom: 15,
        gestureHandling: 'cooperative'
      });

    var request = {
      query: city,
      fields: ['name', 'geometry'],
    };
    service = new google.maps.places.PlacesService(map);
    service.findPlaceFromQuery(request, function (results, status) {
      if (status === google.maps.places.PlacesServiceStatus.OK) {
        for (var i = 0; i < results.length; i++) {
          createMarker(results[i]);
        }
        map.setCenter(results[0].geometry.location);
      }
    });
  }

  function initMapRefresh(map, center, markerData) {
    markers = [];
    var sydney = new google.maps.LatLng(-33.867, 151.195);
    // infowindow = new google.maps.InfoWindow();
    map = new google.maps.Map(
      document.getElementById('map'), {
        center: center,
        zoom: 15,
        gestureHandling: 'cooperative',
        title: map.title
      });

    let marker = new google.maps.Marker({
      map: map,
      position: center,
      draggable: true,
      icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
      title: `marker1`,
      edited: false,
      id: `marker1`
    });


    for (userMarkers of markerData) {
      marker = new google.maps.Marker({
        position: {
          lat: Number(userMarkers.lat),
          lng: Number(userMarkers.lng)
        },
        map: map
      })
    }

    $('.map-desc-title').text(`Map: ${map.title}`);
    markers.push(marker);
  }

  function initMapSlider() {
    let i = 0;
    console.log('lat')
    // REMOVE THIS WHEN NOT LOGGED IN USER HAS RANDOM MAPS
    '<% if (locals.user){ %>'
    '<% for(userMap of maps){ %>'
    map = new google.maps.Map(
      document.getElementById(`map${i}`), {
        map_id: `Map: ${i}`,
        zoom: 13,
        disableDefaultUI: true,
        center: {
          lat: JSON.parse('<%= userMap.lat %>'),
          lng: JSON.parse('<%= userMap.lng %>'),
        },
        gestureHandling: 'cooperative'
      });
    var marker = new google.maps.Marker({
      position: {
        lat: JSON.parse('<%= userMap.lat %>'),
        lng: JSON.parse('<%= userMap.lng %>')
      },
      map: map
    })
    i++;
    '<% for(userMarker of markers){ %>'
    '<% for(userMarkerData of userMarker){ %>'
    if (JSON.parse('<%= userMarkerData.map_id%>') === JSON.parse('<%= userMap.id%>')) {
      let marker = new google.maps.Marker({
        position: {
          lat: JSON.parse('<%= userMarkerData.lat %>'),
          lng: JSON.parse('<%= userMarkerData.lng %>')
        },
        map: map
      })
    };
    '<%  } %>'
    '<%  } %>'
    '<%  } %>'
    '<%  } %>'
  };

  function createMarker(place) {
    let marker = new google.maps.Marker({
      map: map,
      position: place.geometry.location,
      draggable: true,
      icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
      title: `marker1`,
      edited: false,
      id: `marker1`
    });
    markers.push(marker);
    newInfoWindow(marker);
  }

  function addMarker(mapData) {
    let lat;
    let lng;
    if (mapData.hasOwnProperty('mapDataProviders')) {
      // console.log(mapData)
      lat = map.getCenter().lat();
      lng = map.getCenter().lng();
      createNewMarker({
        lat: lat,
        lng: lng,
        map: map
      });
    } else {
      // Add in some check that lat long and title are in there
      mapData.forEach(maps => {
        lat = maps.lat;
        lng = maps.lng;
        createNewMarker({
          lat: lat,
          lng: lng,
          map: map
        });
      })
    }
  };

  function createNewMarker(markerData) {
    marker = new google.maps.Marker({
      position: {
        lat: markerData.lat,
        lng: markerData.lng
      },
      map: markerData.map,
      draggable: true,
      animation: google.maps.Animation.DROP,
      title: `marker${markers.length + 1}`,
      edited: false,
      id: `marker${markers.length + 1}`
    });
    markers.push(marker);
    google.maps.event.clearInstanceListeners(marker);
    google.maps.event.addListener(marker, 'click', function () {
      newInfoWindow(marker);
    })
    // markers.forEach(marker => markerLoc.push({id: marker.id, lat: marker.getPosition().lat(), lng: marker.getPosition().lng()}))
    // console.log(markerLoc);
  };

  function newInfoWindow(marker) {
    const infowindow = new google.maps.InfoWindow();
    // marker.addListener('click', toggleBounce);
    infowindow.close(); // Close previously opened infowindow
    // if (needString) {
    const contentString = setContentString(marker.edited, {
      title: marker.title,
      desc: marker.description
    });
    infowindow.setContent(contentString);
    // }
    infowindow.open(map, marker);
  }

  function setContentString(edit, data) {
    if (edit) {
      return '<div class="marker-display">' +
        `<button class="marker-edit marker${markers.length}"> edit </button>` +
        `<h3 class="marker-title">${data.title}</h3>` +
        `<h5 class="marker-desc">${data.desc}</h5>` +
        '</div>'
    } else {
      return '<div class="marker-form">' +
        'Marker Title' +
        '<input type="text" class="marker-title" name="title" placeholder="Title">' +
        'Marker Description' +
        '<input type="text" class="marker-desc" name="description" placeholder="Description">' +
        'Image Url' +
        '<input type="text" class="marker-img" name="imgURL" placeholder="image URL">' +
        `<button class="marker-data marker${markers.length}" >submit</button>` +
        '</div>'
    }
  }
  const toggleBounce = function () {
    if (this.getAnimation() !== null) {
      this.setAnimation(null);
    } else {
      this.setAnimation(google.maps.Animation.BOUNCE);
    }
  };
  const clearMarker = function (markers) {
    for (let i = 1; i < markers.length; i++) {
      markers[i].setMap(null);
    }
  };
  const createMap = function (markers) {
    let markerData = [];
    for (let i = 0; i < markers.length; i++) {
      let marker = {};
      marker['location'] = {
        lat: markers[i].getPosition().lat(),
        lng: markers[i].getPosition().lng(),
      };
      markerData.push(marker);
    }
    $.ajax({
      type: 'POST',
      data: JSON.stringify(markerData),
      // data: markerData,
      contentType: 'application/json',
      url: '/endpoint',
      success: function (data) {
        console.log('success');
      }
    });
  }
</script>
<script type="text/javascript">
  $(function () {


    $('#mapCollection').on('click', '.hover-btns', (event) => {
      const icon = $(event.target).siblings()[0];
      const mapSib = $(event.target).parentsUntil('.map-btns')[1];
      const mapID = $(mapSib).siblings()[0].classList[1];
      if (icon.classList[1] === 'fa-expand-alt') {
        $.ajax({
          type: 'GET',
          data: {
            mapID
          },
          // data: markerData,
          contentType: 'application/json',
          url: '/map/test',
          success: function (data) {
            const center = new google.maps.LatLng(data[0][0].lat, data[0][0].lng);
            const markerData = data[1][0];
            map = new google.maps.Map(
              document.getElementById('map'), {
                center: {
                  lat: Number(data[0][0].lat),
                  lng: Number(data[0][0].lng),
                },
                title: mapID,
                zoom: 12
              });

            initMapRefresh(map, center, markerData)
          }
        });
      };
    })

    // REMOVE THIS WHEN NOT LOGGED IN USER HAS RANDOM MAPS
    '<% if (locals.user){ %>'
    $mapContainer = $("#mapCollection")
    const empty = function () {
      $('#mapCollection').empty();
      // for (let i = 0; i < '<%= maps.length %>'; i++) {
      '<% for (let i = 0; i < maps.length; i++) { %>'
      $('#mapCollection').append(`
        <div class="map-btns">
          <div class="hover-btns">
        <span class="fa-stack fa-1x user-maps-icons">
          <i class="far fa-star fa-stack-1x"></i>
          <i class="far fa-circle fa-stack-2x"></i>
        </span>
        <span class="fa-stack fa-1x user-maps-icons">
          <i class="fas fa-edit fa-stack-1x"></i>
          <i class="far fa-circle fa-stack-2x"></i>
        </span>
        <span class="fa-stack fa-1x user-maps-icons">
          <i class="fas fa-expand-alt fa-stack-1x"></i>
          <i class="far fa-circle fa-stack-2x"></i>
        </span>
          </div>
          <div class="map <%= maps[i].id %>" id='map<%= i %>'>ALEX</div>
          </div>`)
      '<% } %>'
      // }
      initMapSlider();
    }

    '<%  } %>'

    $('#my-maps').on('click', function () {
      empty();
      // initMapSlider();
    })

    $('.gmaps').on('click', `.marker-data`, function () {
      const title = $(this).siblings()[0];
      const desc = $(this).siblings()[1];
      const imgURL = $(this).siblings()[2];
      const parentDiv = $(this).parent();
      for (const marker of markers) {
        if (marker.id === this.classList[1]) {
          marker.title = $(title).val();
          marker.description = $(desc).val();
          marker.imgURL = $(imgURL).val();
          marker.edited = true;
          const contentString = setContentString(marker.edited, {
            title: marker.title,
            desc: marker.description
          });
          console.log('content string', contentString)
          console.log('marker data', marker);
          $(parentDiv).replaceWith(contentString);
          if (marker.edited) {
            google.maps.event.clearInstanceListeners(marker);
            google.maps.event.addListener(marker, 'click', function () {
              newInfoWindow(marker);
            })
          }
        }
      }
    })
    $('.gmaps').on('click', `.marker-edit`, function () {
      const parentDiv = $(this).parent();
      for (const marker of markers) {
        if (marker.id === this.classList[1]) {
          const contentString = setContentString(marker.edited, {
            title: marker.title,
            desc: marker.description
          });
          $(parentDiv).replaceWith(contentString);
          marker.edited = false;
          if (!marker.edited) {
            google.maps.event.clearInstanceListeners(marker);
            google.maps.event.addListener(marker, 'click', function () {
              newInfoWindow(marker);
            })
          }
        }
      }
    })
    $("#registerUser").on("click", function (event) {
      event.preventDefault();
      $('#loginContainer').hide();
      $('#registerContainer').show();
    });

    $('#create').hide();

    // $('.menu-search-input').on("keyup", function(e) {
    //   e.preventDefault();
    // });
  });
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= key %>&libraries=places&callback=initMap" async defer>
</script>

</html>
