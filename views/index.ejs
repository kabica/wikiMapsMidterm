<!DOCTYPE html>
<html>

<head>
  <title>Home Page</title>

  <!-- Framework CSS -->
  <link rel="stylesheet" href="/vendor/normalize-4.1.1.css" type="text/css" />
  <link rel="stylesheet" href="/vendor/border-box.css" type="text/css" />

  <!-- Internal CSS -->
  <link rel="stylesheet" href="/styles/layout.css" type="text/css" />
  <link rel="stylesheet" href="/styles/nav.css" type="text/css" />
  <link rel="stylesheet" href="/styles/menu.css" type="text/css" />
  <link rel="stylesheet" href="/styles/header.css" type="text/css" />
  <link rel="stylesheet" href="/styles/discover.css" type="text/css" />
  <link rel="stylesheet" href="/styles/auth.css" type="text/css" />
  <link rel="stylesheet" href="/styles/marker.css" type="text/css" />

  <!-- Framework JS -->
  <script type="text/javascript" src="/vendor/jquery-3.0.0.js"></script>
  <script src="https://kit.fontawesome.com/3449331f18.js" crossorigin="anonymous"></script>

  <!-- Internal JS -->
  <script type="text/javascript" src="/scripts/app.js"></script>
  <script type="text/javascript" src="/scripts/nav.js"></script>
</head>

<body>


  <%- include partials/_nav %>

  <%- include partials/_auth %>

  <%- include partials/_menu %>

  <main class="container">

    <header class="map-desc">
      <h1 class="map-desc-title">MAP TITLE!</h1>
      <p class="map-desc-info">MAP INFO!</p>
      <form id="testButton">
        <!-- <input id="testButton" class="tweet" type="submit" value="Tweet" /> -->
      <button id="drop" onclick="addMarker(map)">Add Mark</button>
      <button id="create" onclick="createMap(markers)">Create</button>
      <button id="create" onclick="clearMarker(markers)">Clear</button>
    </header>

    <section id="map" class="gmaps"> -->
      <h2>MAPS!</h2>
    </section>

    <%- include partials/_discover %>
    <% console.log(locals) %>
  </main>

</body>
<script>
  // This example requires the Places library. Include the libraries=places
  // parameter when you first load the API. For example:
  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

    let map;
    let service;
    let infowindow;
    let markers = [];
    let markerLoc = [];

  function initMap() {
    var sydney = new google.maps.LatLng(-33.867, 151.195);

    infowindow = new google.maps.InfoWindow();

    map = new google.maps.Map(
      document.getElementById('map'), {
        center: '<%= city %>',
        zoom: 15
      });

    var request = {
      query: '<%= city %>',
      fields: ['name', 'geometry'],
    };

    service = new google.maps.places.PlacesService(map);

    service.findPlaceFromQuery(request, function (results, status) {
      if (status === google.maps.places.PlacesServiceStatus.OK) {
        for (var i = 0; i < results.length; i++) {
          createMarker(results[i]);
        }
        map.setCenter(results[0].geometry.location);
      }
    });
  }

  function createMarker(place) {
    let marker = new google.maps.Marker({
      map: map,
      position: place.geometry.location,
      draggable: true,
      icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
    });
    markers.push(marker);

    google.maps.event.addListener(marker, 'click', function () {
      infowindow.setContent(place.name);
      infowindow.open(map, this);
    });
  }


  function addMarker(mapData) {
    let lat;
    let lng;
    if (mapData.hasOwnProperty('mapDataProviders')) {
      // console.log(mapData)
      lat = map.getCenter().lat();
      lng = map.getCenter().lng();
      createNewMarker({lat: lat, lng: lng, map: map});
    } else {
      // Add in some check that lat long and title are in there
      mapData.forEach(maps => {
        lat = maps.lat;
        lng = maps.lng;
        createNewMarker({lat: lat, lng: lng, map: map});
      })
    }
  };

  function createNewMarker(markerData) {
    marker = new google.maps.Marker({
      position: {
        lat: markerData.lat,
        lng: markerData.lng
      },
      map: markerData.map,
      draggable: true,
      animation: google.maps.Animation.DROP,
      title: 'ALEX',
      description: 'ALEX',
      id: 'bica'
    });

    const contentString =
              '<div class="marker-form">'+
                'Marker Title'+
                '<input type="text" class="marker-title" name="title" placeholder="Title">'+
                'Marker Description'+
                '<input type="text" class="marker-desc" name="description" placeholder="Description">'+
                'Image Url'+
                '<input type="text" class="marker-img" name="imgURL" placeholder="image URL">'+
                `<button class="marker-data marker${markers.length}" >submit</button>`+
              '</div>';
    const infowindow = new google.maps.InfoWindow();
    markers.push(marker);

    // markers.forEach(marker => markerLoc.push({id: marker.id, lat: marker.getPosition().lat(), lng: marker.getPosition().lng()}))

    // console.log(markerLoc);
    // marker.addListener('click', toggleBounce);
    google.maps.event.addListener(marker, 'click', function() {
        infowindow.close(); // Close previously opened infowindow
        infowindow.setContent(contentString);
        infowindow.open(map, this);
    })
  };

  const toggleBounce = function () {
    if (this.getAnimation() !== null) {
      this.setAnimation(null);
    } else {
      this.setAnimation(google.maps.Animation.BOUNCE);
    }
  };

  const clearMarker = function (markers) {
    for (let i = 1; i < markers.length; i++) {
      markers[i].setMap(null);
    }
  };
  const createMap = function (markers) {
    let markerData = [];
    for (let i = 0; i < markers.length; i++) {
      let marker = {};
      marker['location'] = {
        lat: markers[i].getPosition().lat(),
        lng: markers[i].getPosition().lng(),
      };
      markerData.push(marker);
    }
    console.log(JSON.stringify(markerData));
    $.ajax({
      type: 'POST',
      data: JSON.stringify(markerData),
      // data: markerData,
      contentType: 'application/json',
      url: '/endpoint',
      success: function (data) {
        console.log('success');
      }
    });
  }
</script>

<script type="text/javascript">

  $(function () {

    let markerArr = [];

    $('.gmaps').on('click', '.marker-data', function() {
      console.log(markers);

      if (!markerArr.includes(this.classList[1])) {
        $('.gmaps').on('click', `.${this.classList[1]}`, function() {
          console.log(this)
        })
        markerArr.push(this.classList[1]);
      }

      const title = $(this).siblings()[0];
      const desc = $(this).siblings()[1];
      const imgURL = $(this).siblings()[2];

      console.log($(title).val(), $(desc).val(), $(imgURL).val());
      // console.log(markerArr)s
    })

    $('#testButton').click(function (e) {
      e.preventDefault();
      console.log('select_link clicked');

      var data = {};
      data.title = "title";
      data.message = "message";

      // $.ajax({
      //   type: 'POST',
      //   data: JSON.stringify(data),
      //   contentType: 'application/json',
      //   url: '/endpoint',
      //   success: function (data) {
      //     console.log('success');
      //     console.log(JSON.stringify(data));
      //   }
      // });

    });
  });
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= key %>&libraries=places&callback=initMap" async defer>
</script>

</html>

